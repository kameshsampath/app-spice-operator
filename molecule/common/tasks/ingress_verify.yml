---
- name: Try getting minikube ip
  command:
    argv:
    - /usr/local/bin/minikube
    - -p
    - "{{ minikube_profile_name }}"
    - ip
  register: cluster_ip_info
  changed_when: False
  ignore_errors: True

- name: Set Cluster IP
  set_fact:
     cluster_ip: "{{ cluster_ip_info.stdout }}"
  when: cluster_ip_info is defined and cluster_ip_info.stdout is defined

- name: Get Ingress Deployments
  k8s_info:
    api_version: v1
    kind: Deployment
    namespace: "{{ ingress_namespace }}"
  register: ingress_deployments
  when: deploy_ingress

- name: Ensure all Ingress Deployments are running
  assert:
    that: "(item.status.availableReplicas == item.status.replicas) and ((item.status.availableReplicas == item.status.readyReplicas))"
  no_log: True
  with_items:
  - "{{ ingress_deployments.resources }}"

- name: Create Test namespace
  k8s:
    kind: Namespace
    name: molecule-ingress-test
    state: present

- name: Deploy Test App myApp
  k8s:
    state: present
    namespace: molecule-ingress-test
    definition: "{{ lookup('file','../myapp/deployment.yaml') }}"
    wait: yes
    wait_sleep: 5
    wait_timeout: 180

- name: Deploy Test Service myApp
  k8s:
    state: present
    namespace: molecule-ingress-test
    definition: "{{ lookup('file','../myapp/service.yaml') }}"

- name: Deploy Test Ingress myApp
  k8s:
    state: present
    namespace: molecule-ingress-test
    definition: |
      apiVersion: networking.k8s.io/v1beta1
      kind: Ingress
      metadata:
        name: myapp
        namespace: molecule-ingress-test
        labels:
          app: myapp
      spec:
        rules:
          - host: 'myapp.molecule-ingress-test.{{ cluster_ip | default("127.0.0.1") }}.nip.io'
            http:
              paths:
                - backend:
                    serviceName: myapp
                    servicePort: 80
    wait: yes
    wait_sleep: 5
    wait_timeout: 180

- name: Invoke the myApp Service
  uri:
    url: 'http://myapp.molecule-ingress-test.{{ cluster_ip | default("127.0.0.1") }}.nip.io/api/hello'
    return_content: yes
  register: hello_response

- name: Verify right reponse received
  assert:
    that: "'Hello World!' == hello_response.content"
